#!/usr/bin/env python3
"""
Demo script cho Gemini 2.0 Flash Preview Image Generation Webapp
Test t·∫•t c·∫£ t√≠nh nƒÉng: Text-to-Image, Image-to-Image, Prompt Splitting
"""

import requests
import json
import time
import os
from PIL import Image, ImageDraw
import base64
import io

BASE_URL = "http://localhost:5000"

def create_test_image(filename, color='blue', size=(100, 100)):
    """T·∫°o ·∫£nh test"""
    img = Image.new('RGB', size, color=color)
    draw = ImageDraw.Draw(img)
    draw.rectangle([20, 20, 80, 80], fill='white')
    draw.text((35, 45), "TEST", fill='black')
    img.save(filename)
    return filename

def wait_for_task_completion(task_id, timeout=60):
    """Ch·ªù task ho√†n th√†nh"""
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            response = requests.get(f"{BASE_URL}/api/tasks/{task_id}")
            if response.status_code == 200:
                task_data = response.json()
                status = task_data.get('status')
                
                if status == 'completed':
                    print(f"‚úÖ Task completed!")
                    return task_data
                elif status == 'failed':
                    print(f"‚ùå Task failed!")
                    return task_data
                else:
                    print(f"‚è≥ Task {status}: {task_data.get('completed_count', 0)}/{task_data.get('total_count', 0)}")
            
            time.sleep(3)
        except Exception as e:
            print(f"‚ö†Ô∏è Error checking task status: {e}")
            time.sleep(3)
    
    print(f"‚è∞ Timeout waiting for task completion")
    return None

def demo_text_to_image():
    """Demo Text-to-Image generation"""
    print("\n" + "="*60)
    print("üé® DEMO: Text-to-Image Generation")
    print("="*60)
    
    try:
        response = requests.post(f"{BASE_URL}/api/tasks", json={
            "prompts": [
                "T·∫°o m·ªôt con r·ªìng xanh bay tr√™n n√∫i tuy·∫øt",
                "T·∫°o m·ªôt ng√¥i nh√† g·ªó nh·ªè b√™n b·ªù h·ªì",
                "T·∫°o m·ªôt robot th√¢n thi·ªán trong v∆∞·ªùn hoa"
            ],
            "batch_name": "Demo Text-to-Image"
        })
        
        if response.status_code == 200:
            result = response.json()
            task_id = result.get('task_id')
            print(f"‚úÖ Created task: {task_id}")
            
            # Ch·ªù ho√†n th√†nh
            task_data = wait_for_task_completion(task_id)
            
            if task_data and task_data.get('results'):
                print(f"\nüìä Results:")
                for i, result in enumerate(task_data['results']):
                    if result.get('success'):
                        print(f"  üñºÔ∏è Image {i+1}: {result.get('image_path')}")
                    else:
                        print(f"  ‚ùå Error {i+1}: {result.get('error')}")
            
            return True
        else:
            print(f"‚ùå Failed to create task: {response.status_code}")
            print(f"Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def demo_image_to_image():
    """Demo Image-to-Image generation"""
    print("\n" + "="*60)
    print("üé® DEMO: Image-to-Image Generation")
    print("="*60)
    
    try:
        # T·∫°o ·∫£nh test
        test_image = create_test_image("demo_input.png", color='red')
        print(f"‚úÖ Created test image: {test_image}")
        
        # Upload ·∫£nh
        files = {'image': ('demo_input.png', open('demo_input.png', 'rb'), 'image/png')}
        upload_response = requests.post(f"{BASE_URL}/api/upload-image", files=files)
        
        if upload_response.status_code == 200:
            upload_result = upload_response.json()
            image_path = upload_result.get('image_path')
            print(f"‚úÖ Uploaded image: {image_path}")
            
            # T·∫°o task v·ªõi input image
            response = requests.post(f"{BASE_URL}/api/tasks", json={
                "prompts": [
                    "T·∫°o phi√™n b·∫£n m·ªõi v·ªõi m√†u xanh l√°",
                    "T·∫°o phi√™n b·∫£n v·ªõi hi·ªáu ·ª©ng neon",
                    "T·∫°o phi√™n b·∫£n v·ªõi background th√†nh ph·ªë"
                ],
                "batch_name": "Demo Image-to-Image",
                "input_image_path": image_path
            })
            
            if response.status_code == 200:
                result = response.json()
                task_id = result.get('task_id')
                print(f"‚úÖ Created image-to-image task: {task_id}")
                
                # Ch·ªù ho√†n th√†nh
                task_data = wait_for_task_completion(task_id)
                
                if task_data and task_data.get('results'):
                    print(f"\nüìä Results:")
                    for i, result in enumerate(task_data['results']):
                        if result.get('success'):
                            print(f"  üñºÔ∏è Image {i+1}: {result.get('image_path')}")
                        else:
                            print(f"  ‚ùå Error {i+1}: {result.get('error')}")
                
                return True
            else:
                print(f"‚ùå Failed to create image-to-image task: {response.status_code}")
                return False
        else:
            print(f"‚ùå Failed to upload image: {upload_response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def demo_prompt_splitting():
    """Demo Prompt Splitting feature"""
    print("\n" + "="*60)
    print("üìù DEMO: Prompt Splitting")
    print("="*60)
    
    try:
        # Test text v·ªõi nhi·ªÅu prompt
        test_text = """
T·∫°o c√°c h√¨nh ·∫£nh sau:
1. M·ªôt con m√®o tr·∫Øng ƒëang ng·ªß tr√™n gh·∫ø sofa
2. M·ªôt b√¨nh hoa h·ªìng ƒë·ªè ƒë·∫∑t tr√™n b√†n g·ªó
3. M·ªôt c·∫£nh ho√†ng h√¥n tr√™n bi·ªÉn v·ªõi thuy·ªÅn bu·ªìm
4. M·ªôt robot th√¢n thi·ªán trong v∆∞·ªùn hoa
5. M·ªôt ng√¥i nh√† g·ªó nh·ªè b√™n b·ªù h·ªì
        """.strip()
        
        print(f"üìù Input text:")
        print(test_text)
        
        # Test v·ªõi AI
        print(f"\nü§ñ Testing with AI...")
        response = requests.post(f"{BASE_URL}/api/split-prompts", json={
            "text": test_text,
            "use_ai": True
        })
        
        if response.status_code == 200:
            result = response.json()
            prompts = result.get('prompts', [])
            print(f"‚úÖ AI split result: {len(prompts)} prompts")
            for i, prompt in enumerate(prompts):
                print(f"  {i+1}. {prompt}")
            
            # T·∫°o task v·ªõi prompts ƒë√£ split
            if prompts:
                print(f"\nüé® Creating task with split prompts...")
                task_response = requests.post(f"{BASE_URL}/api/tasks", json={
                    "prompts": prompts[:3],  # Ch·ªâ l·∫•y 3 prompts ƒë·∫ßu ƒë·ªÉ test nhanh
                    "batch_name": "Demo Split Prompts"
                })
                
                if task_response.status_code == 200:
                    task_result = task_response.json()
                    task_id = task_result.get('task_id')
                    print(f"‚úÖ Created task with split prompts: {task_id}")
                    
                    # Ch·ªù ho√†n th√†nh
                    task_data = wait_for_task_completion(task_id)
                    
                    if task_data and task_data.get('results'):
                        print(f"\nüìä Results:")
                        for i, result in enumerate(task_data['results']):
                            if result.get('success'):
                                print(f"  üñºÔ∏è Image {i+1}: {result.get('image_path')}")
                            else:
                                print(f"  ‚ùå Error {i+1}: {result.get('error')}")
                else:
                    print(f"‚ùå Failed to create task: {task_response.status_code}")
            
            return True
        else:
            print(f"‚ùå Failed to split prompts: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def demo_api_keys():
    """Demo API Keys management"""
    print("\n" + "="*60)
    print("üîë DEMO: API Keys Status")
    print("="*60)
    
    try:
        response = requests.get(f"{BASE_URL}/api/keys")
        if response.status_code == 200:
            result = response.json()
            keys = result.get('keys', [])
            print(f"‚úÖ API Keys ({len(keys)} keys):")
            for i, key in enumerate(keys):
                print(f"  {i+1}. {key[:8]}...{key[-8:]}")
        else:
            print(f"‚ùå Failed to get API keys: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def main():
    """H√†m ch√≠nh"""
    print("üöÄ GEMINI 2.0 FLASH PREVIEW IMAGE GENERATION DEMO")
    print("=" * 60)
    print("üéØ Testing all features of the webapp")
    print("=" * 60)
    
    # Ki·ªÉm tra backend
    print("üîç Checking backend status...")
    try:
        response = requests.get(f"{BASE_URL}/")
        if response.status_code == 200:
            print("‚úÖ Backend is running")
        else:
            print("‚ùå Backend not responding properly")
            return
    except Exception as e:
        print(f"‚ùå Backend not available: {e}")
        print("üí° Please start the backend with: python backend/app.py")
        return
    
    # Demo c√°c t√≠nh nƒÉng
    demo_api_keys()
    demo_text_to_image()
    demo_image_to_image()
    demo_prompt_splitting()
    
    print("\n" + "="*60)
    print("üéâ DEMO HO√ÄN TH√ÄNH!")
    print("="*60)
    print("‚úÖ T·∫•t c·∫£ t√≠nh nƒÉng ƒë√£ ƒë∆∞·ª£c test th√†nh c√¥ng")
    print("üåê M·ªü browser v√† truy c·∫≠p: http://localhost:3000")
    print("üìÅ Ki·ªÉm tra th∆∞ m·ª•c 'images/' ƒë·ªÉ xem k·∫øt qu·∫£")
    print("="*60)

if __name__ == "__main__":
    main()
