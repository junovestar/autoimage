#!/usr/bin/env python3
"""
Script ƒë·ªÉ t√¨m model Gemini ho·∫°t ƒë·ªông v·ªõi free tier v√† image generation
"""

import os
import json
from google import genai
import time
from datetime import datetime

# API key ƒë·ªÉ test
API_KEY = "AIzaSyAhC-zhBuMwgtgBIKCxCbwvrmIQ_hOYQvE"

# Danh s√°ch models ƒë·ªÉ test
MODELS_TO_TEST = [
    "gemini-2.0-flash-preview-image-generation",
    "gemini-2.0-flash-image-preview", 
    "gemini-2.0-flash",
    "gemini-2.0-flash-exp",
    "gemini-1.5-flash",
    "gemini-1.5-pro",
    "gemini-1.5-flash-image-preview"
]

def test_model(model_name, api_key):
    """Test m·ªôt model c·ª• th·ªÉ"""
    print(f"\nüîç Testing model: {model_name}")
    print(f"üîë API Key: {api_key[-8:]}...")
    
    try:
        client = genai.Client(api_key=api_key)
        
        # Test v·ªõi text-only request
        print(f"  üìù Testing text-only request...")
        
        try:
            response = client.models.generate_content(
                model=model_name,
                contents=[
                    {
                        "parts": [
                            {
                                "text": "T·∫°o m·ªôt h√¨nh ·∫£nh ƒë∆°n gi·∫£n: m·ªôt ng√¥i nh√† nh·ªè m√†u xanh"
                            }
                        ]
                    }
                ]
            )
            
            if response.candidates and response.candidates[0].content:
                has_image = False
                has_text = False
                
                for part in response.candidates[0].content.parts:
                    if hasattr(part, 'inline_data') and part.inline_data:
                        has_image = True
                        print(f"  ‚úÖ SUCCESS: Model tr·∫£ v·ªÅ ·∫£nh!")
                        
                        # L∆∞u ·∫£nh test
                        import base64
                        image_data = base64.b64decode(part.inline_data.data)
                        test_filename = f"test_{model_name.replace('-', '_')}.png"
                        with open(test_filename, "wb") as f:
                            f.write(image_data)
                        print(f"  üíæ ·∫¢nh ƒë√£ l∆∞u: {test_filename}")
                        
                    elif hasattr(part, 'text') and part.text:
                        has_text = True
                        print(f"  üìù Text response: {part.text[:100]}...")
                
                if has_image:
                    return {
                        'status': 'success',
                        'model': model_name,
                        'type': 'image_generation',
                        'message': 'Model h·ªó tr·ª£ image generation'
                    }
                elif has_text:
                    return {
                        'status': 'success',
                        'model': model_name,
                        'type': 'text_only',
                        'message': 'Model ch·ªâ h·ªó tr·ª£ text'
                    }
                else:
                    return {
                        'status': 'error',
                        'model': model_name,
                        'message': 'Kh√¥ng c√≥ content'
                    }
            else:
                print(f"  ‚ùå ERROR: Kh√¥ng c√≥ content trong response")
                return {
                    'status': 'error',
                    'model': model_name,
                    'message': 'Kh√¥ng c√≥ content'
                }
                
        except Exception as e:
            error_str = str(e)
            print(f"  ‚ùå ERROR: {error_str}")
            
            if "RESOURCE_EXHAUSTED" in error_str:
                return {
                    'status': 'quota_exceeded',
                    'model': model_name,
                    'message': 'API key ƒë√£ h·∫øt quota'
                }
            elif "PERMISSION_DENIED" in error_str:
                return {
                    'status': 'permission_denied',
                    'model': model_name,
                    'message': 'API key kh√¥ng c√≥ quy·ªÅn truy c·∫≠p model n√†y'
                }
            elif "INVALID_ARGUMENT" in error_str:
                return {
                    'status': 'invalid_argument',
                    'model': model_name,
                    'message': 'Invalid argument - c√≥ th·ªÉ model kh√¥ng h·ªó tr·ª£ text-only'
                }
            elif "NOT_FOUND" in error_str:
                return {
                    'status': 'not_found',
                    'model': model_name,
                    'message': 'Model kh√¥ng t·ªìn t·∫°i'
                }
            else:
                return {
                    'status': 'error',
                    'model': model_name,
                    'message': error_str
                }
                
    except Exception as e:
        print(f"  ‚ùå CRITICAL ERROR: {e}")
        return {
            'status': 'critical_error',
            'model': model_name,
            'message': f'Kh√¥ng th·ªÉ t·∫°o client: {e}'
        }

def main():
    """H√†m ch√≠nh"""
    print("üöÄ Gemini Models Finder - T√¨m model ho·∫°t ƒë·ªông v·ªõi free tier")
    print("=" * 70)
    print(f"‚è∞ Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üîë API Key: {API_KEY[-8:]}...")
    print(f"üìã Total models to test: {len(MODELS_TO_TEST)}")
    
    results = []
    
    for i, model_name in enumerate(MODELS_TO_TEST, 1):
        print(f"\n{'='*60}")
        print(f"üîç Testing Model {i}/{len(MODELS_TO_TEST)}")
        print(f"{'='*60}")
        
        result = test_model(model_name, API_KEY)
        results.append(result)
        
        # Delay gi·ªØa c√°c models
        time.sleep(2)
    
    # T√≥m t·∫Øt k·∫øt qu·∫£
    print(f"\n{'='*70}")
    print("üìä SUMMARY RESULTS")
    print(f"{'='*70}")
    
    working_models = []
    text_only_models = []
    quota_exceeded_models = []
    error_models = []
    
    for result in results:
        model_name = result['model']
        status = result['status']
        
        print(f"\nüîç {model_name}:")
        print(f"  Status: {status}")
        print(f"  Message: {result.get('message', 'N/A')}")
        
        if status == 'success' and result.get('type') == 'image_generation':
            print(f"  ‚úÖ HO·∫†T ƒê·ªòNG - Image Generation!")
            working_models.append(model_name)
        elif status == 'success' and result.get('type') == 'text_only':
            print(f"  üìù HO·∫†T ƒê·ªòNG - Text Only")
            text_only_models.append(model_name)
        elif status == 'quota_exceeded':
            print(f"  ‚ö†Ô∏è H·∫æT QUOTA")
            quota_exceeded_models.append(model_name)
        else:
            print(f"  ‚ùå KH√îNG HO·∫†T ƒê·ªòNG")
            error_models.append(model_name)
    
    print(f"\n{'='*70}")
    print("üéØ RECOMMENDATIONS:")
    print(f"{'='*70}")
    
    if working_models:
        print(f"‚úÖ WORKING MODELS (Image Generation): {', '.join(working_models)}")
        print("   - C√≥ th·ªÉ s·ª≠ d·ª•ng cho webapp")
        print("   - H·ªó tr·ª£ text-to-image")
        
    if text_only_models:
        print(f"üìù TEXT-ONLY MODELS: {', '.join(text_only_models)}")
        print("   - Ch·ªâ h·ªó tr·ª£ text generation")
        print("   - Kh√¥ng ph√π h·ª£p cho image generation")
        
    if quota_exceeded_models:
        print(f"‚ö†Ô∏è QUOTA EXCEEDED MODELS: {', '.join(quota_exceeded_models)}")
        print("   - ƒê√£ h·∫øt quota free tier")
        print("   - C·∫ßn ch·ªù reset ho·∫∑c upgrade")
        
    if error_models:
        print(f"‚ùå ERROR MODELS: {', '.join(error_models)}")
        print("   - C√≥ l·ªói kh√°c")
        
    if not working_models:
        print("‚ùå KH√îNG C√ì MODEL N√ÄO H·ªñ TR·ª¢ IMAGE GENERATION!")
        print("   - C√≥ th·ªÉ c·∫ßn t·∫°o API key m·ªõi")
        print("   - Ho·∫∑c t·∫•t c·∫£ models ƒë√£ h·∫øt quota")
    
    print(f"\nüîß NEXT STEPS:")
    if working_models:
        print("   1. C·∫≠p nh·∫≠t backend ƒë·ªÉ s·ª≠ d·ª•ng model ƒë·∫ßu ti√™n trong danh s√°ch")
        print("   2. Test v·ªõi webapp")
        print("   3. Monitor free tier limits")
    else:
        print("   1. T·∫°o API keys m·ªõi trong Google AI Studio")
        print("   2. Ki·ªÉm tra billing v√† quota settings")
        print("   3. Th·ª≠ v·ªõi c√°c t√†i kho·∫£n kh√°c")

if __name__ == "__main__":
    main()
